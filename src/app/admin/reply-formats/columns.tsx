import { Checkbox } from "@/components/ui/checkbox";
import { ColumnDef } from "@tanstack/react-table";
import { CellAction } from "./cell-action";

export type MessageTemplate = {
  id?: number; // Optional, since it's auto-generated by Sequelize
  type: string; // Always required
  mode: "email" | "sms" | "whatsapp"; // ENUM values
  active: boolean; // Default is true but required
  subject?: string | null; // Optional for email templates
  template: string; // Required
  createdAt?: Date; // Sequelize adds timestamps by default
  updatedAt?: Date; // Sequelize adds timestamps by default
};

// Mode Filter Options
export const modeOptions = [
  { value: "email", label: "Email" },
  { value: "sms", label: "SMS" },
  { value: "whatsapp", label: "WhatsApp" },
];

export const messageTemplateColumns: ColumnDef<MessageTemplate, unknown>[] = [
  {
    id: "select",
    header: ({ table }: { table: any }) => (
      <Checkbox
        checked={table.getIsAllPageRowsSelected()}
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all"
      />
    ),
    cell: ({ row }: { row: any }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "type",
    header: "Type",
    cell: ({ row }) => <span>{row.original.type}</span>,
  },
  {
    accessorKey: "mode",
    header: "Mode",
    cell: ({ row }) => {
      const mode = modeOptions.find(
        (option) => option.value === row.original.mode
      );
      return <span>{mode?.label || "Unknown"}</span>; // Display the label from `modeOptions`
    },
    filterFn: "equals", // Optional: Use equals for filtering
  },
  {
    accessorKey: "active",
    header: "Active",
    cell: ({ row }) => (
      <span>{row.original.active ? "Active" : "Inactive"}</span>
    ),
  },
  {
    accessorKey: "subject",
    header: "Subject",
    cell: ({ row }) => <span>{row.original.subject || "N/A"}</span>, // Subject is optional
  },
  {
    accessorKey: "template",
    header: "Template",
    cell: ({ row }) => (
      <button
        className="text-blue-500 underline"
        onClick={() => openTemplateModal(row.original.template)}
      >
        View Template
      </button>
    ), // Add a button to view the template in a modal
  },
  {
    header: "",
    accessorKey: "actions",
    id: "actions",
    cell: ({ row }: { row: any }) => <CellAction data={row.original} />,
  },
];

// Function to open the modal (you can implement this in your component)
const openTemplateModal = (template: string) => {
  // Logic to open a modal and display the template (HTML rendering)
  console.log("View template:", template);
};
